inc "examples/std.frs";

<* CRASH TODO: Bug fix
createMap (width, height) {
    var map = 0..(width - 1);
    map, y -> {
        map[y] = list (height);
        O: y, "->", map[y], '\n';
    }
    ret map;
}
*>

val width  = 100;
val height = 100;

** Size of Array is wrong!!! look in interpreter!
val surf = width * height;
var map = list (surf);

** Fill with random numbers!
(0..surf-1), i -> map[i] = rand (2);


renderMap () {
    clear ();
    (0..(surf-1)), i -> {
        O: rand (2) ? "██" : "  ";
        !((i+1) % width) > O: '\n';
    }
}

updateCells () {
    var newMap = list (surf);

    (0..(surf-1)), i -> {
        newMap[i] = map[i];

        var livingCells = 0;

        livingCells += i - width - 1 < 0 ? 0 : map[i - width - 1];
        livingCells += i - width < 0 ? 0 : map[i - width];
        livingCells += i - width + 1 < 0 ? 0 : map[i - width + 1];

        livingCells += int (i / width) * width >= i - 1 ? 0 : map[i - 1];
        livingCells += int (i / width) * width <  i - 1 ? 0 : map[i + 1];

        livingCells += i + width - 1 >= surf ? 0 : map[i + width - 1];
        livingCells += i + width >= surf ? 0 : map[i + width];
        livingCells += i + width + 1 >= surf ? 0 : map[i + width + 1];

        (!map[i] & livingCells == 3) > newMap[i] = 1;
        (map[i] & (livingCells <= 1 | livingCells >= 4)) > newMap[i] = 0;
    }
    (0..(surf-1)), i -> map[i] = newMap[i];
}

true -> {
    renderMap ();

    updateCells ();
}
