inc "examples/std.frs";

<*
::mul(l, x) {
    l, i -> l[i] = l[i] * x;
    ret l;
}

::forEach(l, f) {
    l, i -> l[i] = f (l[i]);
    ret l;
}

var myList = 0..10;

myList = myList::forEach((x) {
    ret x * (-1);
});

O: myList, '\n';


*>

::filter(l, f) {
    var nL = [];
    for (0, len (l) - 1, (i) {
        !(f(l[i])) > nL += l[i];
    });
    ret nL;
}

::forEach(l, f) {
    l, i -> f (l[i]);
    ret l;
}

::turn(l) {
    val ll = len (l) - 1;
    var nl = [];
    l, i -> nl += l[ll - i];
    ret nl;
}

::biggest(l) {
    (len (l) <= 0) > ret 0;
    var b = l[0];
    var bi = 0;
    l, i -> {
        (l[i] > b) {
            b = l[i];
            bi = i;
        }
    }
    ret bi;
}

::sort(l) {
    var nl = [];
    var bi = 0;

    l, i -> {
        bi = l::biggest();
        nl += l[bi];
        l[bi] = 0;
    }

    ret nl;
}

<*
(0..10)::filter ((x) {
    ret x % 2;
}) :: forEach ((x) {
    O: '<', x, '\n';
})::turn()::forEach ((x) {
    O: '>', x, '\n';
});
*>

var ml = list (1000);
ml, i -> ml[i] = rand (1000);
O: ml::sort(), '\n';


<*
O: myList::filter((x) {
    ret x % 2;
})::filter((x) {
    ret x == 0;
}), '\n';
*>

















































<* TODO: multi [][] *>
<* do TODOs from code *>
<* changing size *>

<*
var x = [12, 43];
x += 3;
O: x, '\n';
*>

<*
div (x, y) < [x / y, x % y];

O: div (9, 5.0);
O: div (10, 5.0);
*>

<*
var in = 0..5;      ** or use range()
var i  = 0;

(i < len (in)) -> {
    O: in[i], '\n';
    i += 1;
}
*>

<*
trim (text) < forEdit (0, len (text) - 1, STR, (i, ntext) {
    (text[i] > ' ') > ~ntext += text[i];
});

var string;

!(readFile("example.frs", $string)) {
    O: "Couldn't read File!\n";
} {
    O: trim (string);
}
*>

<*
true -> {
    var t = [3, 4, 6, 8];

    O: t, '\n';
    t = [2, 7];

    O: t, '\n';
}*>

<* TODO: Fix malloc when list size changes *>
<*
cList (size, fill = 0) < forEdit (1, size, [], (i, list) {
    ~list += fill;
});

var list = cList (3);

O: list, '\n';
*>
