< START - FOUND BUGS >
    < error message wrong line >
    < improve float system >
    < wrong position for arguments when calling functions with '=' >
< END - FOUND BUGS >

< START - Koala's Standart Library >
    < STD - DataTypes >
    val STR   = "";
    val CHAR  = 'A' - 65;
    val INT   = 0;
    val FLOAT = 0.0;

    < STD - Read Methode >
    read (type = INT) {
        var x = type;
        I: &x;
        ret x;
    }

    < STD - Print Methode >
    print (x) > O: x, '\n';

    < STD - Sleep Methode, working on Linux/BSD/Unix/OSX >
    sleep (x = FLOAT) > S: "sleep $x";

    < STD - clear text in terminal >
    clear () > S: "clear";

    < STD - For loop >
    for (min = INT, max = INT, lambda = (x) { O: x, '\n'; }) {
        (min < max + 1) -> {
            lambda (min);
            min += 1;
        }
    }

    < STD - exit >
    exit (status = INT) {
        O: "\nExit status: $status\n";
        jump -1;
    }

    < STD - abs make negative numbers positive >
    abs (x) > (x < 0) { ret x * (-1); } { ret x; };

    < STD - cast to char >
    char (x) > ret CHAR + x;

    < STD - cast to int >
    int (x) > ret INT + x;

    < STD - cast to string >
    str (x) > ret STR + x;

< END - Koala's Standart Library >


< Example program >


< Example Calculation-Program with integrated strings >
<
    var a = 4, b = 2;
    print ("$a + $b = ${ a + b }");
>



< ABC-Program using std-for >
<
    for ('a', 'z', (i) { O: "$i\n"; });
>


< FUN with Pattern >
<
    for (read (), read (), (i) { 
        for (0, 9, (j) { 
            O: "$i$j\t";
        });
        O: "\n";
    });
>

< FUN with pointers >
<
    var a = 5, b = 10, c = 15;
>
    < print (~&a); also possible >
<
    print (a);
    print (~(&a + 1));
    print (~(&a + 2));
>

< ASCII - Table >
<
    var col = 7;
    var rows = (int ('~') - int (' ')) / col + 1;

    for (0, rows - 1, (i) {
        for (0, col - 1, (j) {
            var pos = int (' ') + i + j * rows;
            (pos < int ('~') + 1) {
                O: pos, ':', char (pos), '\t';
            }
        });
        O: '\n';
    });
>
