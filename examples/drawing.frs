inc "examples/std.frs";

<*
    moveUp (x) > O: "\x1b[$xA";
    moveDown (x) > O: "\x1b[$xB";
    moveRight (x) > O: "\x1b[$xC";
    moveLeft (x) > O: "\x1b[$xD";
*>

moveTo (x, y) > O: "\x1b[$y;$xf";
setColor (c) > O: "\x1b[$cm";
clear () > O: "\x1b[2J";

var snake_x = 0, snake_y = 0;
val direction;
val MAX_WIDTH = 30, MAX_HEIGHT = 30;

init ()
{
    clear ();

    <* draw border *>
    setColor (92);

    moveTo (1, 1);
    O: "██" * MAX_WIDTH;

    moveTo (1, MAX_HEIGHT + 1 + 2);
    O: "██" * MAX_WIDTH;

    for (1, MAX_HEIGHT + 2, (y) {
        moveTo (1, y);
        O: "██";
    });

    for (0, MAX_HEIGHT + 2, (y) {
        moveTo (MAX_WIDTH * 2 + 1, y + 1);
        O: "██";
    });

    <* reset color to white *>
    setColor (39);
}

init ();

true -> {
    moveTo (snake_x * 2 + 1 + 2, snake_y + 1 + 1);
    O: "██";

    moveTo (0, MAX_HEIGHT + 3 + 2);
    I(single): &direction;

    <* Movement *>
    (direction == 'w') > snake_y -= 1;
    (direction == 's') > snake_y += 1;
    (direction == 'a') > snake_x -= 1;
    (direction == 'd') > snake_x += 1;

    <* clear *>
    (direction == 'c') > init ();

    <* Set color using numbers *>
    (direction >= '0') > (direction <= '9') > setColor (int(direction) - '0' + 30);

    <* Exit Program *>
    (direction == 'q') {
        moveTo(0, 0);
        clear(); 
        ret;
    }

    <* mirror on screen end *>
    (snake_x >= MAX_WIDTH-1) > snake_x = 0;
    (snake_x < 0) > snake_x = MAX_WIDTH;
    (snake_y > MAX_HEIGHT) > snake_y = 0;
    (snake_y < 0) > snake_y = MAX_HEIGHT;

    moveTo (0, MAX_HEIGHT + 4 + 2);
    O: snake_x , ' ', snake_y, "     \n";
}
