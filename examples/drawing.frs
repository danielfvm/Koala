inc "examples/std.frs";

<* Not in use currently!
    ansi.moveUp (x) > O: "\x1b[$xA";
    ansi.moveDown (x) > O: "\x1b[$xB";
    ansi.moveRight (x) > O: "\x1b[$xC";
    ansi.moveLeft (x) > O: "\x1b[$xD";
*>

ansi.moveTo (x, y) > O: "\x1b[$y;$xf";
ansi.setColor (c) > O: "\x1b[$cm";
ansi.clear () > O: "\x1b[2J";

var snake_x = 0, snake_y = 0;
val direction;
val MAX_WIDTH = 30, MAX_HEIGHT = 30;

init ()
{
    ansi.clear ();

    <* draw border *>
    ansi.setColor (92);

    ansi.moveTo (1, 1);
    O: "██" * (MAX_WIDTH + 2);

    ansi.moveTo (1, MAX_HEIGHT + 1 + 2);
    O: "██" * (MAX_WIDTH + 2);

    (1..MAX_HEIGHT + 2), y -> {
        ansi.moveTo (1, y);
        O: "██";
    };

    (0..MAX_HEIGHT + 2), y -> {
        ansi.moveTo (MAX_WIDTH * 2 + 5, y + 1);
        O: "██";
    };

    <* reset color to white *>
    ansi.setColor (39);
}

init ();

true -> {
    ansi.moveTo (snake_x * 2 + 1 + 2, snake_y + 1 + 1);
    O: "██";

    ansi.moveTo (0, MAX_HEIGHT + 3 + 2);
    I(single): $direction;

    <* Movement *>
    (direction == 'w') > snake_y -= 1;
    (direction == 's') > snake_y += 1;
    (direction == 'a') > snake_x -= 1;
    (direction == 'd') > snake_x += 1;

    <* clear *>
    (direction == 'c') > init ();

    <* Set color using numbers *>
    (direction >= '0' & direction <= '9') > ansi.setColor (int(direction) - '0' + 30);

    <* Exit Program *>
    (direction == 'q') {
        ansi.moveTo(0, 0);
        ansi.clear(); 
        ret;
    }
    
    <* mirror on screen end *>
    (snake_y > MAX_HEIGHT) > snake_y = 0;
    (snake_x > MAX_WIDTH)  > snake_x = 0;
    (snake_x < 0) > snake_x = MAX_WIDTH;
    (snake_y < 0) > snake_y = MAX_HEIGHT;

    ansi.moveTo (0, MAX_HEIGHT + 4 + 2);
    O: snake_x, ' ', snake_y, "     \n";
}
